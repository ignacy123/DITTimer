package model.db;

import model.enums.CubeType;
import model.enums.State;
import model.logic.ScrambleGeneratorImplementation;
import model.logic.Solve;
import model.logic.SolveImplementation;

import java.sql.*;
import java.util.ArrayList;

public class DatabaseServiceImplementation implements DatabaseService {
    Connection c;
    Statement stmt;
    PreparedStatement pstmt;
    ResultSet rs;

    public void start() {
        try {
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
            c = DriverManager.getConnection("jdbc:hsqldb:file:testdb;shutdown=true", "SA", "");
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
            System.out.println("Couldn't open model.db");
        }
        System.out.println("Opened database successfully");

        try {
            DatabaseMetaData meta = c.getMetaData();
            ResultSet tables = meta.getTables(null, null, "THREEBYTHREE", null);
            if (tables.next()) {
                System.out.println("Table THREEBYTHREE exists, skipping creation.");
            } else {
                stmt = c.createStatement();
                String sql = "CREATE TABLE THREEBYTHREE " +
                        "(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY," +
                        " TIME          TIMESTAMP    NOT NULL, " +
                        " STATE            INT     NOT NULL, " +
                        " COMMENT        CHAR(50), " +
                        " SCRAMBLE       CHAR(200)     NOT NULL," +
                        " DATE         TIMESTAMP NOT NULL)";
                stmt.executeUpdate(sql);
                System.out.println("Table THREEBYTHREE has been created");

            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Failed creating table THREEBYTHREE");
        }

        try {
            DatabaseMetaData meta = c.getMetaData();
            ResultSet tables = meta.getTables(null, null, "FOURBYFOUR", null);
            if (tables.next()) {
                System.out.println("Table FOURBYFOUR exists, skipping creation.");
            } else {
                stmt = c.createStatement();
                String sql = "CREATE TABLE FOURBYFOUR " +
                        "(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY," +
                        " TIME          TIMESTAMP   NOT NULL, " +
                        " STATE            INT     NOT NULL, " +
                        " COMMENT        CHAR(50), " +
                        " SCRAMBLE       CHAR(200)     NOT NULL," +
                        " DATE         TIMESTAMP NOT NULL)";
                stmt.executeUpdate(sql);
                System.out.println("Table FOURBYFOUR has been created");

            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Failed creating table FOURBYFOUR");
        }

        try {
            DatabaseMetaData meta = c.getMetaData();
            ResultSet tables = meta.getTables(null, null, "TWOBYTWO", null);
            if (tables.next()) {
                System.out.println("Table TWOBYTWO exists, skipping creation.");
            } else {
                stmt = c.createStatement();
                String sql = "CREATE TABLE TWOBYTWO " +
                        "(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY," +
                        " TIME          TIMESTAMP    NOT NULL, " +
                        " STATE            INT     NOT NULL, " +
                        " COMMENT        CHAR(50), " +
                        " SCRAMBLE       CHAR(200)     NOT NULL," +
                        " DATE         TIMESTAMP NOT NULL)";
                stmt.executeUpdate(sql);
                System.out.println("Table TWOBYTWO has been created");

            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Failed creating table TWOBYTWO");
        }
    }


    //0 - OK
    //1 - +2
    //2 - DNF
    //3 - REJ
    @Override
    public void insert(Solve solve) {
        try {
            String sql1 = "INSERT INTO ";
            String sql3 = " (TIME, STATE, COMMENT, SCRAMBLE, DATE) " +
                    " Values (?, ?, ?, ?, ?)";
            String sql2 = "";
            switch (solve.getType()) {
                case TWOBYTWO:
                    sql2 = "TWOBYTWO";
                    break;
                case THREEBYTHREE:
                    sql2 = "THREEBYTHREE";
                    break;
                case FOURBYFOUR:
                    sql2 = "FOURBYFOUR";
                    break;
            }
            String sql = sql1 + sql2 + sql3;
            pstmt = c.prepareStatement(sql);
            pstmt.setTimestamp(1, solve.getTime());
            switch (solve.getState()) {
                case CORRECT:
                    pstmt.setInt(2, 0);
                    break;
                case TWOSECPENALTY:
                    pstmt.setInt(2, 1);
                    break;
                case DNF:
                    pstmt.setInt(2, 2);
                    break;
                default:
                    pstmt.setInt(2, 3);
            }
            pstmt.setString(3, solve.getComment());
            pstmt.setString(4, solve.getScramble());
            pstmt.setTimestamp(5, new java.sql.Timestamp(solve.getDate().getTime()));
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }


    @Override
    public void dropDatabase() {
        try {
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
            c = DriverManager.getConnection("jdbc:hsqldb:file:testdb;shutdown=true", "SA", "");
            stmt = c.createStatement();
            stmt.execute("DROP SCHEMA PUBLIC CASCADE");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public ArrayList<Solve> pullAndParseAllSolves(CubeType cubeType) {
        ArrayList<Solve> solves = new ArrayList<>();
        String sql = "";
        String sql1 = "SELECT * FROM  ";
        String sql2 = "";
        switch (cubeType) {
            case TWOBYTWO:
                sql2 = "TWOBYTWO";
                break;
            case THREEBYTHREE:
                sql2 = "THREEBYTHREE";
                break;
            case FOURBYFOUR:
                sql2 = "FOURBYFOUR";
                break;
        }
        sql = sql1 + sql2;
        try {
            stmt = c.createStatement();
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                Solve solve = new SolveImplementation();
                solve.setID(rs.getInt(1));
                solve.setTime(rs.getTimestamp(2));
                int a = rs.getInt(3);
                switch (a) {
                    case 0:
                        solve.setState(State.CORRECT);
                        break;
                    case 1:
                        solve.setState(State.TWOSECPENALTY);
                        break;
                    case 2:
                        solve.setState(State.DNF);
                        break;
                    default:
                        solve.rejectSolution();
                }
                solve.setType(cubeType);
                try{
                    solve.setComment(rs.getString(4).trim());
                }catch(NullPointerException e){
                    solve.setComment("");
                }
                solve.setScramble(rs.getString(5).trim());
                solve.setDate(new java.util.Date(rs.getTimestamp(6).getTime()));
                solves.add(solve);

            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return solves;
    }


    @Override
    public void deleteLast(CubeType cubeType) {
        String sql = "";
        String sql1 = "SELECT TOP 1 id FROM  ";
        String sql2 = "";
        switch (cubeType) {
            case TWOBYTWO:
                sql2 = "TWOBYTWO";
                break;
            case THREEBYTHREE:
                sql2 = "THREEBYTHREE";
                break;
            case FOURBYFOUR:
                sql2 = "FOURBYFOUR";
                break;
        }
        sql = sql1 + sql2 + " ORDER BY id DESC";
        int i = 0;
        try {
            stmt = c.createStatement();
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                i = rs.getInt(1);
            } else {
                System.out.println("attempting to delete last from empty table");
                return;
            }
            sql = "DELETE FROM " + sql2 + " WHERE id=" + i;
            stmt = c.createStatement();
            rs = stmt.executeQuery(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }


    }

    @Override
    public void updateLast(Solve solve) {
        String sql = "";
        String sql1 = "SELECT TOP 1 id FROM  ";
        String sql2 = "";
        switch (solve.getType()) {
            case TWOBYTWO:
                sql2 = "TWOBYTWO";
                break;
            case THREEBYTHREE:
                sql2 = "THREEBYTHREE";
                break;
            case FOURBYFOUR:
                sql2 = "FOURBYFOUR";
                break;
        }
        sql = sql1 + sql2 + " ORDER BY id DESC";
        int i = 0;
        try {
            stmt = c.createStatement();
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                i = rs.getInt(1);
            } else {
                System.out.println("attempting to update last in empty table");
                return;
            }
            sql = "UPDATE " + sql2 + " SET TIME = ?, STATE = ?, COMMENT = ?, SCRAMBLE = ?, DATE = ? WHERE id=" + i;
            pstmt = c.prepareStatement(sql);
            pstmt.setTimestamp(1, solve.getTime());
            switch (solve.getState()) {
                case CORRECT:
                    pstmt.setInt(2, 0);
                    break;
                case TWOSECPENALTY:
                    pstmt.setInt(2, 1);
                    break;
                case DNF:
                    pstmt.setInt(2, 2);
                    break;
                default:
                    pstmt.setInt(2, 3);
            }
            pstmt.setString(3, solve.getComment());
            pstmt.setString(4, solve.getScramble());
            pstmt.setTimestamp(5, new java.sql.Timestamp(solve.getDate().getTime()));
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    @Override
    public void clearTable(CubeType cubeType) {
        String sql = "";
        String sql1 = "DELETE FROM  ";
        String sql2 = "";
        switch (cubeType) {
            case TWOBYTWO:
                sql2 = "TWOBYTWO";
                break;
            case THREEBYTHREE:
                sql2 = "THREEBYTHREE";
                break;
            case FOURBYFOUR:
                sql2 = "FOURBYFOUR";
                break;
        }
        sql = sql1+sql2;

        try {
            stmt = c.createStatement();
            stmt.execute(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }
}
